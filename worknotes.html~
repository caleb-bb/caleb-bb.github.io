<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <!-- 2023-02-20 Mon 10:43 -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii" />
  <meta name="viewport" content=
  "width=device-width, initial-scale=1" />

  <title>&lrm;</title>
  <meta name="author" content="Caleb Beers" />
  <meta name="generator" content="Org Mode" />
  <style type="text/css">
/*<![CDATA[*/
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
  /*]]>*/
  </style>
  <script type="text/x-mathjax-config">
<![CDATA[
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
  });
  ]]>
  </script>
  <script src=
  "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"
  type="text/javascript">
</script>
</head>

<body>
  <div id="content" class="content">
    <div id="table-of-contents" role="doc-toc">
      <h2>Table of Contents</h2>

      <div id="text-table-of-contents" role="doc-toc">
        <ul>
          <li>
            <a href="#org60a258f">1. January</a>

            <ul>
              <li>
                <a href="#orgdf54030">1.1. Monday 1/30</a>

                <ul>
                  <li><a href="#orgdc6d2b0">1.1.1. Add missing
                  billing categories #187</a></li>

                  <li><a href="#orged1298e">1.1.2. Feat/na i116
                  email identity management #189</a></li>
                </ul>
              </li>

              <li>
                <a href="#org4bec0a0">1.2. Tuesday 1/31</a>

                <ul>
                  <li><a href="#org51e58e5">1.2.1. Feat/na i116
                  email identity management #189</a></li>
                </ul>
              </li>
            </ul>
          </li>

          <li>
            <a href="#org3681d31">2. February</a>

            <ul>
              <li>
                <a href="#org8855bfb">2.1. Wednesday 2/1</a>

                <ul>
                  <li><a href="#org0c3c887">2.1.1. Feat/na i116
                  email identity management #189</a></li>
                </ul>
              </li>

              <li><a href="#orga360eb7">2.2. Thursday 2/2</a></li>

              <li>
                <a href="#org9ad47b4">2.3. Friday 2/3</a>

                <ul>
                  <li><a href="#org50fd3b5">2.3.1. (feat) [NA-I143]
                  Seperate &ldquo;notes&rdquo; as a separate button
                  and patch objects</a></li>
                </ul>
              </li>

              <li><a href="#org0fe17ac">2.4. Monday 2/6</a></li>

              <li><a href="#orgf186057">2.5. Tuesday 2/7</a></li>

              <li><a href="#org891ed33">2.6. Wednesday 2/8</a></li>

              <li><a href="#orga07549b">2.7. Thursday 2/9</a></li>

              <li><a href="#org8512cb7">2.8. Friday 2/10</a></li>

              <li><a href="#org3e45873">2.9. Monday 2/13</a></li>

              <li><a href="#org4491d68">2.10. Tuesday 2/14</a></li>

              <li>
                <a href="#orgfd5c4d9">2.11. Wednesday 2/15</a>

                <ul>
                  <li><a href="#orgb2d2ee4">2.11.1.
                  NA-I136</a></li>

                  <li><a href="#orgd3a2493">2.11.2.
                  chore/structural refactor</a></li>

                  <li><a href="#org6033c6b">2.11.3.
                  NA-I143</a></li>
                </ul>
              </li>

              <li>
                <a href="#org258cc4c">2.12. Thursday 2/16</a>

                <ul>
                  <li><a href="#orgbadae66">2.12.1.
                  NA-I143</a></li>
                </ul>
              </li>

              <li><a href="#orgfa45928">2.13. Friday 2/17</a></li>
            </ul>
          </li>
        </ul>
      </div>
    </div>

    <div id="outline-container-org60a258f" class="outline-2">
      <h2 id="org60a258f"><span class="section-number-2">1.</span>
      January</h2>

      <div class="outline-text-2" id="text-1"></div>

      <div id="outline-container-orgdf54030" class="outline-3">
        <h3 id="orgdf54030"><span class=
        "section-number-3">1.1.</span> Monday 1/30</h3>

        <div class="outline-text-3" id="text-1-1"></div>

        <div id="outline-container-orgdc6d2b0" class="outline-4">
          <h4 id="orgdc6d2b0"><span class=
          "section-number-4">1.1.1.</span> Add missing billing
          categories #187</h4>

          <div class="outline-text-4" id="text-1-1-1">
            <p>(note: merge this one before #189)</p>

            <ol class="org-ol">
              <li>Put the links in `root.html.heex` under the right
              category (Accounting).</li>

              <li>Make the selected categories in the multi-select
              be put onto the credit card when it&rsquo;s
              submitted. This involves reworking the controller and
              the template.</li>

              <li>Make sure that the categories pre-selected in the
              multi-select are only those categories already on the
              card. Rework the assigns:
              `@assigned\billing_categories` changes to
              `@billing_categories` and `@assigned categories`
              stays the same.</li>

              <li>Change schema names for credit card and paypal
              account to singular</li>

              <li>Remove category\edit link and files</li>

              <li>Resize and center edit and create modals for
              billing categories</li>

              <li>Finishing:

                <ol class="org-ol">
                  <li>Run tests</li>

                  <li>Manually test</li>

                  <li>`mix compile &ndash;force` and fix all errors
                  and warnings</li>

                  <li>Remove inspects and puts</li>
                </ol>
              </li>
            </ol>
          </div>
        </div>

        <div id="outline-container-orged1298e" class="outline-4">
          <h4 id="orged1298e"><span class=
          "section-number-4">1.1.2.</span> Feat/na i116 email
          identity management #189</h4>

          <div class="outline-text-4" id="text-1-1-2">
            <ol class="org-ol">
              <li>Move the `New Identity` link up to the top under
              `Listing Identities`.</li>

              <li>Likewise with `New Email`.</li>

              <li>Import Ecto Commons validator functions to
              `schema.ex` so they&rsquo;ll be available to all
              schemas.</li>

              <li>Add belongs&rarr;(:identity) to the email schema
              and has_many(:emails) to identity schema.</li>

              <li>Add select field to the modal for emails.</li>
            </ol>
          </div>
        </div>
      </div>

      <div id="outline-container-org4bec0a0" class="outline-3">
        <h3 id="org4bec0a0"><span class=
        "section-number-3">1.2.</span> Tuesday 1/31</h3>

        <div class="outline-text-3" id="text-1-2"></div>

        <div id="outline-container-org51e58e5" class="outline-4">
          <h4 id="org51e58e5"><span class=
          "section-number-4">1.2.1.</span> Feat/na i116 email
          identity management #189</h4>

          <div class="outline-text-4" id="text-1-2-1">
            <ol class="org-ol">
              <li>Address PR comments re: formatting and naming
              fields.</li>

              <li>Need to find a way to generate a keyword list so
              first and last names are displayed but keyed to ids.
              This will take some research. It turns out that
              `select` as used in Phoenix templates will happily
              take a keyword list as an argument. The keys of the
              keyword list will be displayed as options, but the
              actual params that the form sends to the event
              handler will be the values of those keys. So I wrote
              a little function `generate\keyword_list/1` in
              `live_helpers.ex`, which sorts out the first and last
              names on a phone account and keys them to ids, then
              spits out a keyword list for neat display in the
              template. :-)</li>

              <li>Allow identities to be added to emails. We need
              to abstract maybe\put_identity to a helpers file
              (probably in `schema.ex`) and make sure it&rsquo;s
              available from there. Also abstract out an
              assign_all_identities function (most likely to
              `live_helpers.ex`) and make that available to both
              the form components i email_live and
              phone_accounts.</li>
            </ol>
          </div>
        </div>
      </div>
    </div>

    <div id="outline-container-org3681d31" class="outline-2">
      <h2 id="org3681d31"><span class="section-number-2">2.</span>
      February</h2>

      <div class="outline-text-2" id="text-2"></div>

      <div id="outline-container-org8855bfb" class="outline-3">
        <h3 id="org8855bfb"><span class=
        "section-number-3">2.1.</span> Wednesday 2/1</h3>

        <div class="outline-text-3" id="text-2-1"></div>

        <div id="outline-container-org0c3c887" class="outline-4">
          <h4 id="org0c3c887"><span class=
          "section-number-4">2.1.1.</span> Feat/na i116 email
          identity management #189</h4>

          <div class="outline-text-4" id="text-2-1-1">
            <ol class="org-ol">
              <li>Need to fix error where NetAdminWeb cannot be
              found when user\settings_controller attempts to use
              it. Turns out that `mix compile &ndash;force` will
              fix errors like that.</li>

              <li>Editing an email account to add an identity does
              not seem to work. Got it working, but had to change
              `identity\id` directly instead of changing the
              association. Let&rsquo;s see how we did it in
              `phone_account`&hellip; It was the `on_replace`
              option that did it. Let&rsquo;s fix that by changing
              to `:nilify` instead of `:update `.</li>

              <li>Change email to email\address in the email
              accounts migration, the email accounts schema, the
              email accounts context, the email accounts live views
              and components and templates, and the tests for all
              those.</li>

              <li>Manually test</li>

              <li>Run tests, make tests pass</li>

              <li>Run `mix compile &ndash;force`</li>
            </ol>
          </div>
        </div>
      </div>

      <div id="outline-container-orga360eb7" class="outline-3">
        <h3 id="orga360eb7"><span class=
        "section-number-3">2.2.</span> Thursday 2/2</h3>

        <div class="outline-text-3" id="text-2-2">
          <p>So far, the postgrex error is only coming up on
          Identities, Emails, and Phone Accounts, PayPal Accounts,
          and Credit Cards pages, not the Users page.</p>

          <p>Anyhow, I checked the Postgrex error:</p>

          <p>[error] Postgrex.Protocol (#PID&lt;0.604.0&gt;)
          disconnected: ** (DBConnection.ConnectionError) owner
          #PID&lt;0.2692.0&gt; timed out because it owned the
          connection for longer than 120000ms (set via the
          :ownership\timeout option)</p>

          <p>Notice the PID is 0.2692.0. This matches the root PID
          for the LiveView socket at the time this was running,
          which implies that this is a LiveView issue. It happens
          no matter which root liveview we&rsquo;re using, but ONLY
          if we&rsquo;re using a liveview.</p>

          <p>Made some minor fixes in the two open PRs. One was
          merged.</p>
        </div>
      </div>

      <div id="outline-container-org9ad47b4" class="outline-3">
        <h3 id="org9ad47b4"><span class=
        "section-number-3">2.3.</span> Friday 2/3</h3>

        <div class="outline-text-3" id="text-2-3"></div>

        <div id="outline-container-org50fd3b5" class="outline-4">
          <h4 id="org50fd3b5"><span class=
          "section-number-4">2.3.1.</span> (feat) [NA-I143]
          Seperate &ldquo;notes&rdquo; as a separate button and
          patch objects</h4>

          <div class="outline-text-4" id="text-2-3-1">
            <p>We need a separate notes tag for:</p>

            <ol class="org-ol">
              <li>Email Accounts</li>

              <li>Identities</li>

              <li>Billing Categories</li>

              <li>Credit Cards *</li>

              <li>Paypal Accounts</li>
            </ol>

            <p>\* already has a notes field but needs the
            &ldquo;notes&rdquo; link removed from the grid and
            turned into a button. The button should change an
            assign that reveals the notes field.</p>

            <p>Create some migrations to add a &ldquo;notes&rdquo;
            text field to email account, identities, billing
            categories, and paypal accounts.</p>

            <p>For objects 1, 2, 3, and 5, the process is:</p>

            <ol class="org-ol">
              <li>Modify the schema

                <ol class="org-ol">
                  <li>Add notes as a field under the schema
                  definition.</li>

                  <li>Add notes in all the appropriate changeset
                  attrs lists</li>
                </ol>
              </li>

              <li>Create the text box component and make it
              reusable.

                <ol class="org-ol">
                  <li>This should be a modal that takes the assigns
                  and can add</li>
                </ol>
              </li>

              <li>Modify the templates

                <ol class="org-ol">
                  <li>Add notes in the form components for each
                  template</li>
                </ol>
              </li>
            </ol>
          </div>
        </div>
      </div>

      <div id="outline-container-org0fe17ac" class="outline-3">
        <h3 id="org0fe17ac"><span class=
        "section-number-3">2.4.</span> Monday 2/6</h3>

        <div class="outline-text-3" id="text-2-4">
          <p>It&rsquo;s too complex to add a modal-within-a-modal,
          so I&rsquo;m going to refactor the form components to
          exist on parent edit liveviews. So for example,
          `form\component.ex` for phone identities will need to
          show up on PhoneIdentitiesLive.Edit. This will require a
          medium-size refactor. This will be a heavier lift than I
          thought.</p>

          <ol class="org-ol">
            <li>Create an edit liveview for the other entities:
            billing categories, emails, identities, phone
            accounts.</li>

            <li>For each of these, edit the router so that the
            `&ldquo;entity/edit&rdquo;` and
            `&ldquo;entity/new&rdquo;` routes point to the new edit
            liveview.</li>

            <li>Add links in the appropriate place in the index
            liveviews.</li>

            <li>Delete old modals and form components. Remove
            `apply\action` pipelines from parent controllers with
            names like `Entity.Index`.</li>

            <li>Remove the hidden inputs and put a note button
            there to open the notes modal.</li>
          </ol>

          <p>NOTE: I would like to set up the structural refactor
          to create &ldquo;assign\changeset&rdquo; and other
          &ldquo;assign&rdquo; functions for these liveviews.
          I&rsquo;ll get to that when I get back to the structural
          refactor.</p>
        </div>
      </div>

      <div id="outline-container-orgf186057" class="outline-3">
        <h3 id="orgf186057"><span class=
        "section-number-3">2.5.</span> Tuesday 2/7</h3>

        <div class="outline-text-3" id="text-2-5">
          <p>Right now we have four liveview entities:</p>

          <ol class="org-ol">
            <li>Billing Categories</li>

            <li>Credit Cards</li>

            <li>Emails</li>

            <li>Identities</li>

            <li>Paypals</li>

            <li>Phone Accounts</li>
          </ol>

          <p>Step 3 of the list from yesterday for each one.</p>
        </div>
      </div>

      <div id="outline-container-org891ed33" class="outline-3">
        <h3 id="org891ed33"><span class=
        "section-number-3">2.6.</span> Wednesday 2/8</h3>

        <div class="outline-text-3" id="text-2-6">
          <p>Almost everything is set up. Now to put the finishing
          touches on the modal and add a note button.</p>

          <p>The note button can start off as a simple button tag
          that emits a click event. That&rsquo;ll change the
          `notes?` assign and then make the multi-line note edit
          modal appear.</p>

          <p>Looks like a button tag submits the form even when it
          doesn&rsquo;t have a `type=&ldquo;submit&rdquo;`
          attribute. Solution: just make it some text and specify
          an event name in the div element.</p>

          <p>Need to correct the tests to reflect the new structure
          in this refactor. Then add tests for the notes
          option.</p>

          <p>And done! All tests pass, no warnings on `mix compile
          &ndash;force`</p>

          <p>Tomorrow: run `git rebase netadmin\v2` and go from
          there.</p>
        </div>
      </div>

      <div id="outline-container-orga07549b" class="outline-3">
        <h3 id="orga07549b"><span class=
        "section-number-3">2.7.</span> Thursday 2/9</h3>

        <div class="outline-text-3" id="text-2-7">
          <p>Index controllers in these files:</p>

          <ol class="org-ol">
            <li>Billing Categories</li>

            <li>Credit Cards</li>

            <li>Emails</li>

            <li>Identities</li>

            <li>Paypals</li>

            <li>Phone Accounts</li>
          </ol>

          <p>To add note button to grids:</p>

          <ol class="org-ol">
            <li>Assign notes?=false in each index
            controller&rsquo;s `mount/3`: \ |&gt; assign(notes?:
            [])</li>

            <li>Add notes? event handler to each index controller:
            @impl true def handle\event(&ldquo;notes-field&rdquo;,
            %{&ldquo;id&rdquo; <code>&gt; id} = params, socket) do
            case socket.assigns.notes =</code> id do true -&gt;
            {:noreply, assign(socket, notes: [])} \ -&gt;
            {:noreply, assign(socket, notes: id)} end end</li>

            <li>Copy and paste this into each index heex:
            &lt;td&gt; &lt;div phx-click=&ldquo;notes-field&rdquo;
            class=&ldquo;notes&rdquo;
            phx-value-id={entity.id}&gt;Notes&lt;/div&gt; &lt;%= if
            entity.id <code>= @notes do %&gt; &lt;%</code>
            entity.notes %&gt; &lt;% end %&gt; &lt;/td&gt;</li>
          </ol>

          <p>Afterwards change paypal edit to show/hide notes as
          the other pages.</p>
        </div>
      </div>

      <div id="outline-container-org8512cb7" class="outline-3">
        <h3 id="org8512cb7"><span class=
        "section-number-3">2.8.</span> Friday 2/10</h3>

        <div class="outline-text-3" id="text-2-8">
          <p>&mdash;</p>
        </div>
      </div>

      <div id="outline-container-org3e45873" class="outline-3">
        <h3 id="org3e45873"><span class=
        "section-number-3">2.9.</span> Monday 2/13</h3>

        <div class="outline-text-3" id="text-2-9">
          <p>Return to working on structural refactor. Pluralize
          schemas and do some housecleaning.</p>

          <p>Go over Tailwind PR and notes PR with Kyle.</p>

          <p>Leave roles alone but change tooltip for billing
          categories to Tailwind.</p>

          <p>Daisy UI is easy to add, so go ahead and add it.</p>
        </div>
      </div>

      <div id="outline-container-org4491d68" class="outline-3">
        <h3 id="org4491d68"><span class=
        "section-number-3">2.10.</span> Tuesday 2/14</h3>

        <div class="outline-text-3" id="text-2-10">
          <p>As it turns out, Tailwind has a set of default styles
          called &ldquo;preflight&rdquo; that overrides the default
          Phoenix styles. Disabled.</p>

          <p>Also worked a little more on the structural refactor.
          I want to get this code nice and clean before more major
          changes are made.</p>
        </div>
      </div>

      <div id="outline-container-orgfd5c4d9" class="outline-3">
        <h3 id="orgfd5c4d9"><span class=
        "section-number-3">2.11.</span> Wednesday 2/15</h3>

        <div class="outline-text-3" id="text-2-11"></div>

        <div id="outline-container-orgb2d2ee4" class="outline-4">
          <h4 id="orgb2d2ee4"><span class=
          "section-number-4">2.11.1.</span> NA-I136</h4>

          <div class="outline-text-4" id="text-2-11-1">
            <p>So, I need to set up a file upload so people can
            upload documents for an identity. Phoenix has a
            `fileupload` function built-in so that&rsquo;s what
            I&rsquo;ll use. Postgres can store binaries, so
            that&rsquo;s how we&rsquo;ll be storing our files.</p>

            <p>The database design should be fairly simple:
            documents ought to have a &ldquo;data&rdquo; field for
            the binary blob. I will need to research how these are
            stored in postgres - might not need a field. It will
            need an `identityid` as a foreign key, and of course,
            each document will have its own `document_id`. By
            itself, those three should be sufficient, although it
            might also behoove us to have a `name` or `title` field
            just to have some way of referencing these things
            without seeing a UUID with a zillion random characters.
            So, the agenda here is:</p>

            <p>On second thought, `identityid` might be wrong.</p>

            <ol class="org-ol">
              <li>Create a migration for the documents table.</li>

              <li>Add a document upload field to the appropriate
              entities</li>

              <li>Adjust the changesets and schemas. This will
              naturally be a `hasmany` relation between the
              entities and their files.</li>
            </ol>
          </div>
        </div>

        <div id="outline-container-orgd3a2493" class="outline-4">
          <h4 id="orgd3a2493"><span class=
          "section-number-4">2.11.2.</span> chore/structural
          refactor</h4>

          <div class="outline-text-4" id="text-2-11-2">
            <p>For the structural refactor, we need:</p>

            <ol class="org-ol">
              <li>Get rid of `no route found` error for
              favicon</li>

              <li>Get rid of `no route found` error for static
              path</li>
            </ol>
          </div>
        </div>

        <div id="outline-container-org6033c6b" class="outline-4">
          <h4 id="org6033c6b"><span class=
          "section-number-4">2.11.3.</span> NA-I143</h4>

          <div class="outline-text-4" id="text-2-11-3">
            <p>And on the `notes` PR, we need to move the notes
            button from the form to the grid. This applies to these
            entities:</p>

            <ol class="org-ol">
              <li>Billing Categories</li>

              <li>Credit Cards</li>

              <li>Emails</li>

              <li>Identities</li>

              <li>Paypals</li>

              <li>Phone Accounts</li>
            </ol>

            <p>This will be accomplished by means of a notes modal
            that opens, takes a changeset for the given item, and
            only updates the notes field.</p>

            <p>It seems that the notes modal needs a way to see
            what kind of struct is being passed in. There is a way
            to pattern match on structs, and it can certainly be
            passed in as an assign.</p>

            <p>The other thing we need to do to make this work is
            make sure that every function for updating an entity in
            a context is named `update` not `updatethis_thing`.
            &lt;&ndash; undo this later (Thursday note)</p>

            <p>To complete the update function in the notes modal,
            I will need to make it possible to select the right
            module for a given struct.</p>
          </div>
        </div>
      </div>

      <div id="outline-container-org258cc4c" class="outline-3">
        <h3 id="org258cc4c"><span class=
        "section-number-3">2.12.</span> Thursday 2/16</h3>

        <div class="outline-text-3" id="text-2-12"></div>

        <div id="outline-container-orgbadae66" class="outline-4">
          <h4 id="orgbadae66"><span class=
          "section-number-4">2.12.1.</span> NA-I143</h4>

          <div class="outline-text-4" id="text-2-12-1">
            <p>Continuing the notes modal work from yesterday.
            It&rsquo;s problematic to have a single modal that does
            all this because it must recognize the type of struct
            it&rsquo;s getting and call the correct context
            function. I&rsquo;ll just duplicate modals instead.</p>

            <p>Note to self: when complexity seems overwhelming,
            premature optimization may have happened. Perhaps solve
            the problem with duplication instead.</p>
          </div>
        </div>
      </div>

      <div id="outline-container-orgfa45928" class="outline-3">
        <h3 id="orgfa45928"><span class=
        "section-number-3">2.13.</span> Friday 2/17</h3>

        <div class="outline-text-3" id="text-2-13"></div>

        <ol class="org-ol">
          <li>
            <a id="org39d0f29" name="org39d0f29"></a>NA-I143<br />

            <div class="outline-text-5" id="text-2-13-0-1">
              <ol class="org-ol">
                <li>Copy notes modal to each live directory for
                each entity</li>

                <li>Add routes for each modal</li>

                <li>Copy and paste modal and notes link into each
                `heex`</li>

                <li>Make modifications in each `heex`</li>

                <li>Make modifications in each `notesmodal`
                controller.</li>

                <li>Add `handleparams/3` call to get the entity id
                to each `index` controller.</li>

                <li>Manual test</li>

                <li>Remove the notes field from the edit views</li>

                <li>Rebase or merge</li>

                <li>Mix format</li>

                <li>Make sure tests pass</li>

                <li>Get rid of any warnings with `mix compile
                &ndash;force`</li>

                <li>Push and request review</li>
              </ol>

              <p>Note: it looks like the paypal and phone accout
              index pages have the edit and delete buttons grouped
              under a single `&lt;tr&gt;` with two `&lt;span&gt;`s.
              Should homogenize those in the structural
              refactor.</p>

              <p>Ran into a very mysterious error where forms were
              not emitting events. As it turns out, forms cannot
              emit events from inside of tables, so the modal has
              to be set outside of the table to emit anything.</p>
            </div>
          </li>
        </ol>
      </div>
    </div>
  </div>

  <div id="postamble" class="status">
    <p class="author">Author: Caleb Beers</p>

    <p class="date">Created: 2023-02-20 Mon 10:43</p>
  </div>
</body>
</html>
